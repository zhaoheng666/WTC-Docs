1、统计页面元素固化，不要受到构建脚本影响；
2、统计页面元素动态值从 stats.json 读取、更新；
3、仅 Github Actions 远程构建时，才执行统计，更新 stats.json；
4、本地统计页面需要的信息直接通过 http 地址从远程获取 stats.json；
5、stats.json 从 git 忽略，但需要保留一份模板，如果 Github Actions 构建时没有 stats.json 用模板生成一个；
6、优化 sync.sh 流程：
    1. 检查本地仓库状态，是否有要提交的内容；（包括修改、新增、未跟踪、移除等）如果没有任何更改，直接拉取远程仓库最新版本，提示仅拉取同步完成，结束任务；
    2. 如果有要提交的内容，执行构建，构建失败直接弹窗提示，结束任务；
    3. 构建成功，拉取远程仓库最新版本；合并本地和远程仓库的更改；自动合并冲突，如果无法自动合并，提示存在冲突，弹窗通知，结束任务；
    4. 生成提交信息，弹窗提示变更内容，等待用户确认是否提交；如果用户选择取消提交，任务结束；
    5. 提交、推送本次变更；
    6.监控 Github Actions 构建状态，等待构建完成；
    7.通知 Github Actions 结果，结束任务；
    注意：任务结束前做必要清理；

  场景1：本地无变更
  1. 检查本地状态 → 无变更
  2. 直接拉取远程最新版本
  3. 结束（不需要构建，因为远程已经是别人构建过的）

  场景2：本地有变更
  1. 检查本地状态 → 有变更
  2. 先构建（基于本地变更）→ 确保本地改动能通过构建
  3. 构建成功后，拉取远程并合并
  4. 弹窗确认提交
  5. 推送